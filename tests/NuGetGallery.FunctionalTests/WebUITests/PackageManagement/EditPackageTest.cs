//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuGetGallery.FunctionalTests
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using System.Net;
    using System.IO;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using NuGetGallery.FunctionTests.Helpers;


  //  [Microsoft.VisualStudio.TestTools.WebTesting.DeploymentItem("tests\\nugetgallery.functionaltests\\PackageNames.csv")]
  //  [Microsoft.VisualStudio.TestTools.WebTesting.DataSource("PackageNames", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\PackageNames.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "PackageNames#csv")]
 //   [DataBinding("PackageNames", "PackageNames#csv", "PackageNames", "PackageNames.PackageNames#csv.PackageNames")]
    public class EditPackageTest : WebTest
    {

        public EditPackageTest()
        {
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
          
            for(int i=0; i<50; i++)
            {
                string packageId = "SimpleTestPackageA";
                string packageVersion = "12.0.0";
                string title = "EditPackage_" + i.ToString();

                WebTestRequest request1 = new WebTestRequest("https://staging.nuget.org/packages/SimpleTestPackageA/12.0.0/Edit");
                request1.ExpectedResponseUrl = "https://staging.nuget.org/Users/Account/LogOn?ReturnUrl=%2fpackages%2fSimpleTestP" +
                    "ackageA%2f12.0.0%2fEdit";
             //   request1.QueryStringParameters.Add("Parameter1", this.Context["PackageNames.PackageNames#csv.PackageNames"].ToString());
                ExtractHiddenFields extractionRule1 = new ExtractHiddenFields();
                extractionRule1.Required = true;
                extractionRule1.HtmlDecode = true;
                extractionRule1.ContextParameterName = "1";
                request1.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
                yield return request1;
                request1 = null;

                WebTestRequest request2 = new WebTestRequest("https://staging.nuget.org/Users/Account/LogOn");
                request2.ThinkTime = 1;
                request2.Method = "POST";
                request2.ExpectedResponseUrl = "https://staging.nuget.org/packages/SimpleTestPackageA/12.0.0/Edit";
                request2.QueryStringParameters.Add("ReturnUrl", "%2fpackages%2fSimpleTestPackageA%2f12.0.0%2fEdit", false, false);
                FormPostHttpBody request2Body = new FormPostHttpBody();
                request2Body.FormPostParameters.Add("__RequestVerificationToken", this.Context["$HIDDEN1.__RequestVerificationToken"].ToString());
                request2Body.FormPostParameters.Add("UserNameOrEmail", "bhuvak@live.com");
                request2Body.FormPostParameters.Add("Password", "#Finally#");
                request2.Body = request2Body;
                //WebTestRequest request2Dependent1 = new WebTestRequest("https://staging.nuget.org/Admin/Glimpse");
                //request2Dependent1.ExpectedResponseUrl = "https://getglimpse.com/Api/Version/Check?Glimpse.Ado=1.2.0&Glimpse.AspNet=1.2.0&G" +
                //    "limpse=1.2.0&Glimpse.EF43=1.2.0&Glimpse.Mvc4=1.2.0&stamp=1377492787789&callback=" +
                //    "glimpse.versionCheck.result";
                //request2Dependent1.QueryStringParameters.Add("n", "glimpse_version_check", false, false);
                //request2Dependent1.QueryStringParameters.Add("version", "1.2.0", false, false);
                //request2Dependent1.QueryStringParameters.Add("stamp", "1377492787789", false, false);
                //request2Dependent1.QueryStringParameters.Add("callback", "glimpse.versionCheck.result", false, false);
                //request2Dependent1.QueryStringParameters.Add("_", "1377492787790", false, false);
                //request2.DependentRequests.Add(request2Dependent1);
                //WebTestRequest request2Dependent2 = new WebTestRequest("https://staging.nuget.org/api/v2/service-alert");
                //request2Dependent2.QueryStringParameters.Add("cachebust", "1377492787803", false, false);
                //request2.DependentRequests.Add(request2Dependent2);
                //WebTestRequest request2Dependent3 = new WebTestRequest("https://staging.nuget.org/Content/font/fontawesome-webfont.eot");
                //request2Dependent3.ThinkTime = 8;
                //request2Dependent3.QueryStringParameters.Add("", "", false, false);
                //request2.DependentRequests.Add(request2Dependent3);
                ExtractHiddenFields extractionRule2 = new ExtractHiddenFields();
                extractionRule2.Required = true;
                extractionRule2.HtmlDecode = true;
                extractionRule2.ContextParameterName = "1";
                request2.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule2.Extract);
                yield return request2;
                request2 = null;

                WebTestRequest request3 = new WebTestRequest("https://staging.nuget.org/packages/SimpleTestPackageA/12.0.0/Edit");
                request3.Method = "POST";
                request3.ExpectedResponseUrl = "https://staging.nuget.org/packages/SimpleTestPackageA/12.0.0";
                FormPostHttpBody request3Body = new FormPostHttpBody();
                request3Body.FormPostParameters.Add("__RequestVerificationToken", this.Context["$HIDDEN1.__RequestVerificationToken"].ToString());
                request3Body.FormPostParameters.Add("Edit.VersionTitle", title);
                request3Body.FormPostParameters.Add("Edit.Description", "My package description.");
                request3Body.FormPostParameters.Add("Edit.Summary", "");
                request3Body.FormPostParameters.Add("Edit.IconUrl", "");
                request3Body.FormPostParameters.Add("Edit.ProjectUrl", "");
                request3Body.FormPostParameters.Add("Edit.Authors", "bhuvana");
                request3Body.FormPostParameters.Add("Edit.Copyright", "");
                request3Body.FormPostParameters.Add("Edit.Tags", "demo");
                request3Body.FormPostParameters.Add("Edit.ReleaseNotes", "");
                request3.Body = request3Body;
                //WebTestRequest request3Dependent1 = new WebTestRequest("https://staging.nuget.org/api/v2/service-alert");
                //request3Dependent1.QueryStringParameters.Add("cachebust", "1377492797562", false, false);
                //request3.DependentRequests.Add(request3Dependent1);
                yield return request3;
                request3 = null;
                int count = 0;
                // sleep until the Odata feed returns new data
                while (count <= 3)
                {
                    System.Threading.Thread.Sleep(20 * 1000);
                    WebRequest request = WebRequest.Create(UrlHelper.V2FeedRootUrl + @"/FindPackagesById()?id='SimpleTestPackageA'");
                    // Get the response.          
                    WebResponse response = request.GetResponse();
                    StreamReader sr = new StreamReader(response.GetResponseStream());
                    string responseText = sr.ReadToEnd();
                    if (responseText.Contains(@"<d:Title>" + title+ "</d:Title>"))
                        break;
                    count++;
                }

                AssertAndValidationHelper.DownloadPackageAndVerify(packageId, packageVersion);
                string expectedNupkgFilePath = Path.Combine(Environment.CurrentDirectory, packageId + "." + packageVersion, packageId + "." + packageVersion + ".nupkg");
                Assert.IsTrue(ClientSDKHelper.GetPackageTitleFromNupkgFile(expectedNupkgFilePath).Equals(title), "Title didnt match the updated title from OData feed");
        }
        }
    }
}
